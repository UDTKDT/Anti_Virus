#include <algorithm>
#include <iostream>
#include <fstream>
#include "util.h"
#include "malware_hash.h"

// hashes.txt의 내용을 vector로 변환
int LoadHashes(const std::string& fileName, std::vector<std::string>& hashes) {
    std::ifstream file(fileName);
    if (!file.is_open()) {
        return ERROR_CANNOT_OPEN_FILE;
    }
    std::string line;
    while (std::getline(file, line)) {
        hashes.push_back(line);
    }
    file.close();
    return SUCCESS_CODE;
}

int CompareByHash(FTSENT *node, std::vector<std::string>& detectedMalware, std::vector<std::string>& hashes) {
    std::string fileHash;
    int result = ComputeSHA256(node->fts_path, fileHash); // 파일의 해시값을 계산
    if (result != SUCCESS_CODE) {
        return ERROR_CANNOT_COMPUTE_HASH;
    }
    for (const auto& hash : hashes) {
        if (fileHash == hash) { //계산된 해시값을 저장된 해시값들과 비교
            // 중복 검사
            if (std::find(detectedMalware.begin(), detectedMalware.end(), node->fts_path) == detectedMalware.end()) {
                detectedMalware.push_back(node->fts_path);
                std::cout << "\n\033[31m[+] Malware detected: [" << node->fts_path << "]\033[0m\n\n";
            }
            break;
        }
    }
    return SUCCESS_CODE;
}