#include <iostream>
#include <fstream>
#include <sstream>
#include <sys/types.h>
#include <sys/stat.h>
#include <openssl/sha.h>
#include <iomanip>
#include "util.h"
#include "malware_hash.h"

// hashes.txt의 내용을 vector로 변환
int LoadHashes(const std::string& fileName, std::vector<std::string>& hashes) {
    std::ifstream file(fileName);
    if (!file.is_open()) {
        return ERROR_CANNOT_OPEN_FILE;
    }
    std::string line;
    while (std::getline(file, line)) {
        hashes.push_back(line);
    }
    file.close();
    return SUCCESS_CODE;
}

int CompareByHash(FTSENT *node, std::vector<std::string>& detectedMalware, std::vector<std::string>& hashes) {
    std::string fileHash;
    int result = ComputeSHA256(node->fts_path, fileHash); // 파일의 해시값을 계산
    if (result != SUCCESS_CODE) {
        return ERROR_CANNOT_COMPUTE_HASH;
    }
    for (const auto& hash : hashes) {
        if (fileHash == hash) { //계산된 해시값을 저장된 해시값들과 비교
            detectedMalware.push_back(node->fts_path);
            std::cout << "\n\033[31m[+] Malware detected: [" << node->fts_path << "]\033[0m\n\n";
            break;
        }
    }
    return SUCCESS_CODE;
}

// SHA256 해시알고리즘을 사용해서 파일의 해시값을 계산
int ComputeSHA256(const std::string& fileName, std::string& fileHash) {
    std::ifstream file(fileName, std::ifstream::binary);
    if (!file) {
        return ERROR_CANNOT_OPEN_FILE;
    }

    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    char buffer[1024];
    while (file.read(buffer, sizeof(buffer))) {
        SHA256_Update(&sha256, buffer, file.gcount());
    }
    SHA256_Update(&sha256, buffer, file.gcount());
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_Final(hash, &sha256);

    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }

    fileHash = ss.str();
    return SUCCESS_CODE;
}